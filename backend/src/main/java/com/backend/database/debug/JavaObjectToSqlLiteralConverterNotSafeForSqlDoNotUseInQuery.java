package com.backend.database.debug;

import java.math.BigDecimal;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;

/**
 * Code generated by ChatGPT
 * <p>
 * Class contains a single method for converting Java Objects to
 * their SQL equivalents in string form.
 * 
 * This class is only for generating debug strings and SHOULD NOT 
 * BE USED IN REAL SQL.
 * 
 * The verbose name is intentional, as it makes usages very easy to spot.
 * 
 * @warning ONLY FOR DEBUG PURPOSES, DO NOT USE IN AN SQL QUERY.
 */
public class JavaObjectToSqlLiteralConverterNotSafeForSqlDoNotUseInQuery {

    private JavaObjectToSqlLiteralConverterNotSafeForSqlDoNotUseInQuery() {}

    /**
     * Convert a Java object to an SQL-esc string.
     * @param value Value to convert.
     * @return A string that looks like the string representation of an SQL literal.
     */
    public static String toLiteral(Object value) {
        return toLiteral(value, Dialect.DEFAULT);
    }

    /**
     * Convert a Java object to an SQL-esc string.
     * @param value Value to convert.
     * @param dialect SQL-dialect to target.
     * @return A string that looks like the string representation of an SQL literal.
     */
    public static String toLiteral(Object value, Dialect dialect) {
        if (value == null) return "NULL";

        if (value instanceof CharSequence) {
            return quoteString(value.toString(), dialect);
        }
        if (value instanceof Character) {
            return quoteString(value.toString(), dialect);
        }
        if (value instanceof Boolean) {
            return booleanLiteral((Boolean) value, dialect);
        }
        if (value instanceof Byte || value instanceof Short || value instanceof Integer || value instanceof Long
                || value instanceof Float || value instanceof Double || value instanceof BigDecimal) {
            return numericLiteral(value);
        }
        if (value instanceof Enum<?>) {
            // default: use quoted name; change to ordinal if you want numbers
            return quoteString(((Enum<?>) value).name(), dialect);
        }
        if (value instanceof java.sql.Date) {
            return "DATE " + quoteString(value.toString(), dialect); // java.sql.Date#toString -> YYYY-MM-DD
        }
        if (value instanceof Time) {
            return "TIME " + quoteString(value.toString(), dialect); // HH:MM:SS
        }
        if (value instanceof Timestamp) {
            // Timestamp.toString -> "YYYY-MM-DD HH:MM:SS[.fffffffff]"
            return "TIMESTAMP " + quoteString(((Timestamp) value).toString(), dialect);
        }
        if (value instanceof LocalDate) {
            return "DATE " + quoteString(((LocalDate) value).format(DateTimeFormatter.ISO_LOCAL_DATE), dialect);
        }
        if (value instanceof LocalTime) {
            return "TIME " + quoteString(((LocalTime) value).format(DateTimeFormatter.ISO_LOCAL_TIME), dialect);
        }
        if (value instanceof LocalDateTime) {
            return "TIMESTAMP " + quoteString(((LocalDateTime) value).format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.SSS")), dialect);
        }
        if (value instanceof OffsetDateTime) {
            // include offset
            return "TIMESTAMP " + quoteString(((OffsetDateTime) value).format(DateTimeFormatter.ISO_OFFSET_DATE_TIME), dialect);
        }
        if (value instanceof Instant) {
            return "TIMESTAMP " + quoteString(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.SSS").withZone(ZoneOffset.UTC)
                    .format((Instant) value), dialect);
        }
        if (value instanceof byte[]) {
            return bytesLiteral((byte[]) value, dialect);
        }
        if (value instanceof Collection<?>) {
            return collectionLiteral((Collection<?>) value, dialect);
        }
        if (value.getClass().isArray()) {
            // handle primitive and object arrays
            int length = java.lang.reflect.Array.getLength(value);
            List<String> parts = new ArrayList<>(length);
            for (int i = 0; i < length; i++) {
                parts.add(toLiteral(java.lang.reflect.Array.get(value, i), dialect));
            }
            return "(" + String.join(", ", parts) + ")";
        }

        // Fallback: use toString() and quote
        return quoteString(value.toString(), dialect);
    }

    // ===== helpers =====

    private static String numericLiteral(Object number) {
        // Ensure plain decimal representation for BigDecimal, floats, etc.
        if (number instanceof Float || number instanceof Double) {
            // avoid scientific notation surprises
            DecimalFormat df = new DecimalFormat("0.############################");
            return df.format(((Number) number).doubleValue());
        }
        return number.toString();
    }

    private static String booleanLiteral(Boolean b, Dialect d) {
        switch (d) {
            case MYSQL:
            case POSTGRES:
            case DEFAULT:
                return b ? "TRUE" : "FALSE";
            case ORACLE:
            case SQLSERVER:
                // many DBs accept 1/0 too
                return b ? "1" : "0";
            default:
                return b ? "TRUE" : "FALSE";
        }
    }

    private static String quoteString(String s, Dialect dialect) {
        if (s == null) return "NULL";
        // basic SQL single-quote escaping (standard)
        String escaped = s.replace("'", "''");
        // dialect-specific prefix for Unicode in SQL Server: N'...'
        if (dialect == Dialect.SQLSERVER) {
            return "N'" + escaped + "'";
        }
        // Postgres: optionally use E'...' for backslash escapes, but default is fine
        return "'" + escaped + "'";
    }

    private static String bytesLiteral(byte[] bytes, Dialect dialect) {
        if (bytes.length == 0) return "''";

        StringBuilder hex = new StringBuilder(bytes.length * 2);
        for (byte b : bytes) {
            hex.append(String.format("%02X", b));
        }
        switch (dialect) {
            case POSTGRES:
                // Postgres: E'\\x...'::bytea or '\x...'::bytea
                return "E'\\\\x" + hex.toString() + "'::bytea";
            case MYSQL:
                // MySQL accepts x'ABCD' or 0xABCD
                return "x'" + hex.toString() + "'";
            case SQLSERVER:
                // SQL Server uses 0xABCD
                return "0x" + hex.toString();
            case ORACLE:
                // Oracle: hextoraw('ABCD')
                return "HEXTORAW('" + hex.toString() + "')";
            default:
                // generic: x'ABCD'
                return "x'" + hex.toString() + "'";
        }
    }

    private static String collectionLiteral(Collection<?> coll, Dialect dialect) {
        return "(" + coll.stream().map(v -> toLiteral(v, dialect)).collect(Collectors.joining(", ")) + ")";
    }

    // Simple enum for dialect tweaks. Expand as needed.
    public enum Dialect {
        DEFAULT, POSTGRES, MYSQL, SQLSERVER, ORACLE
    }
}
